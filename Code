import sqlite3
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import pandas as pd
import streamlit as st

def create_database():
    conn = sqlite3.connect("mood_tracker.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS mood_entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            mood TEXT,
            reason TEXT,
            timestamp TEXT
        )
    ''')
    conn.commit()
    conn.close()

def log_mood(mood, reason=None):
    conn = sqlite3.connect("mood_tracker.db")
    cursor = conn.cursor()
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO mood_entries (mood, reason, timestamp) VALUES (?, ?, ?)", (mood, reason, timestamp))
    conn.commit()
    conn.close()

def fetch_daily_report():
    conn = sqlite3.connect("mood_tracker.db")
    cursor = conn.cursor()
    today_date = datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT mood, reason, timestamp FROM mood_entries WHERE timestamp LIKE ?", (f"{today_date}%",))
    data = cursor.fetchall()
    conn.close()
    return data

def fetch_overall_report():
    conn = sqlite3.connect("mood_tracker.db")
    cursor = conn.cursor()
    cursor.execute("SELECT mood, reason, timestamp FROM mood_entries")
    data = cursor.fetchall()
    conn.close()
    return data

def calculate_streak():
    conn = sqlite3.connect("mood_tracker.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT DATE(timestamp) FROM mood_entries ORDER BY DATE(timestamp)")
    dates = [datetime.strptime(row[0], "%Y-%m-%d").date() for row in cursor.fetchall()]
    conn.close()
    
    streak, max_streak, current_streak = 0, 0, 0
    prev_date = None
    
    for date in dates:
        if prev_date and (date - prev_date == timedelta(days=1)):
            current_streak += 1
        else:
            current_streak = 1
        
        max_streak = max(max_streak, current_streak)
        prev_date = date
    
    return current_streak, max_streak

def generate_line_graph(data, title="Mood Distribution"):
    mood_counts = {}
    for mood, _, _ in data:
        mood_counts[mood] = mood_counts.get(mood, 0) + 1

    moods = list(mood_counts.keys())
    counts = list(mood_counts.values())

    plt.figure(figsize=(8, 5))
    plt.plot(moods, counts, marker='o', color='blue', linestyle='-', linewidth=2, markersize=6)
    plt.title(title, fontsize=14, color='darkgreen')
    plt.xlabel('Mood', fontsize=12, color='darkblue')
    plt.ylabel('Count', fontsize=12, color='darkblue')
    plt.xticks(rotation=45, ha='right', fontsize=10, color='brown')
    plt.tight_layout()
    st.pyplot(plt)

def fun_fact():
    facts = [
        "Did you know? Smiling can boost your immune system.",
        "Hugs release oxytocin, which makes you feel happier.",
        "Laughter can reduce stress and improve your mood.",
        "Listening to your favorite song can trigger a dopamine release.",
        "Practicing gratitude can significantly improve mental health."
    ]
    return facts[datetime.now().second % len(facts)]

def motivational_thought():
    return "Tough times never last, but tough people do. Keep going!"

def main_app():
    st.title("‚ú®Mood Tracker‚ú®")
    st.markdown("<h3>Track your emotions and discover what makes you YOU!</h3>", unsafe_allow_html=True)
    create_database()

    current_streak, max_streak = calculate_streak()
    now = datetime.now().strftime("%A, %d %B %Y, %I:%M %p")
    st.markdown(
        f"<h4>üåü Current Streak: {current_streak} day(s)</h4>"
        f"<h4>üî• Max Streak: {max_streak} day(s)</h4>",
        unsafe_allow_html=True,
    )
    st.markdown(f"<p style='font-size:18px;'>üïí Today is <b>{now}</b></p>", unsafe_allow_html=True)
    st.info(fun_fact())

    menu = ["Log Mood", "Daily Report", "Overall Report", "Mood Statistics"]
    choice = st.sidebar.selectbox("Menu", menu)

    if choice == "Log Mood":
        st.subheader("üìù Log Your Mood")
        mood = st.text_input("How are you feeling today? (e.g., happy, sad, angry, excited, content)")
        reason = st.text_area("Reason (Optional):")
        if st.button("Submit"):
            if mood:
                log_mood(mood, reason)
                if mood.lower() in ["sad", "angry", "frustrated", "anxious"]:
                    st.warning(motivational_thought())
                else:
                    st.success(f"Your mood has been logged! Keep shining üåü")
            else:
                st.error("Please enter a mood.")

    elif choice == "Daily Report":
        st.subheader("üìÖ Daily Mood Report")
        data = fetch_daily_report()
        if data:
            generate_line_graph(data, "Mood Distribution for Today")
            df = pd.DataFrame(data, columns=["Mood", "Reason", "Timestamp"])
            st.table(df)
        else:
            st.info("No entries found for today.")

    elif choice == "Overall Report":
        st.subheader("üìä Overall Mood Report")
        data = fetch_overall_report()
        if data:
            generate_line_graph(data, "Overall Mood Distribution")
            df = pd.DataFrame(data, columns=["Mood", "Reason", "Timestamp"])
            st.table(df)
        else:
            st.info("No entries found.")

    elif choice == "Mood Statistics":
        st.subheader("üìà Mood Statistics")
        data = fetch_overall_report()
        if data:
            mood_counts = {}
            for mood, _, _ in data:
                mood_counts[mood] = mood_counts.get(mood, 0) + 1
            st.write(mood_counts)
        else:
            st.info("No data available.")

if __name__ == "__main__":
    main_app()
